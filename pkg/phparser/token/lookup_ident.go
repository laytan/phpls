// Code generated by go generate; DO NOT EDIT.

// Add a token between tokenType.KeywordsStart and tokenType.KeywordsEnd and it will automatically be added.
// The keyword match is the lowercased version of the constant,
// You can change this keyword by adding a comment like this: Foo // literal:"bar".

package token

func LookupIdent(keyword string) Type {
    switch(keyword) {
    case "function":
        return Function
    case "return":
        return Return
    case "abstract":
        return Abstract
    case "and":
        return And
    case "as":
        return As
    case "break":
        return Break
    case "callable":
        return Callable
    case "case":
        return Case
    case "catch":
        return Catch
    case "class":
        return Class
    case "clone":
        return Clone
    case "const":
        return Const
    case "continue":
        return Continue
    case "default":
        return Default
    case "die":
        return Die
    case "exit":
        return Exit
    case "do":
        return Do
    case "echo":
        return Echo
    case "else":
        return Else
    case "elseif":
        return ElseIf
    case "enddeclare":
        return EndDeclare
    case "endfor":
        return EndFor
    case "endforeach":
        return EndForEach
    case "endif":
        return EndIf
    case "endswitch":
        return EndSwitch
    case "endwhile":
        return EndWhile
    case "extends":
        return Extends
    case "final":
        return Final
    case "finally":
        return Finally
    case "fn":
        return Fn
    case "for":
        return For
    case "foreach":
        return ForEach
    case "global":
        return Global
    case "goto":
        return GoTo
    case "if":
        return If
    case "implements":
        return Implements
    case "include":
        return Include
    case "include_once":
        return IncludeOnce
    case "instanceof":
        return InstanceOf
    case "insteadof":
        return InsteadOf
    case "interface":
        return Interface
    case "kvar":
        return KVar
    case "match":
        return Match
    case "namespace":
        return Namespace
    case "new":
        return New
    case "or":
        return Or
    case "print":
        return Print
    case "private":
        return Private
    case "protected":
        return Protected
    case "public":
        return Public
    case "readonly":
        return Readonly
    case "require":
        return Require
    case "require_once":
        return RequireOnce
    case "static":
        return Static
    case "switch":
        return Switch
    case "throw":
        return Throw
    case "trait":
        return Trait
    case "try":
        return Try
    case "use":
        return Use
    case "while":
        return While
    case "xor":
        return XOR
    case "yield":
        return Yield
    case "yield from":
        return YieldFrom
    case "true":
        return True
    case "false":
        return False
    default:
        return Ident
    }
}

